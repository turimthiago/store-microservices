version: "3.9"
services:
  rabbitmq:
    image: rabbitmq:3.9.7-management-alpine
    container_name: rabbitmb
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - node_qeue_nw
  store:
    build: ./store
    env_file:
      - ./store/.env
    container_name: store
    ports:
      - 3040:3040
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - node_qeue_nw
  invoice:
    build: ./invoice
    env_file:
      - ./invoice/.env
    container_name: invoice
    ports:
      - 3030:3030
    depends_on:
      - store
      - mongo
    networks:
      - node_qeue_nw
  stock:
    build: ./stock
    env_file:
      - ./stock/.env
    container_name: stock
    ports:
      - 3050:3050
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - node_qeue_nw
  postgres:
    container_name: 'postgres'
    image: postgres
    environment:
      - POSTGRES_PASSWORD=admin
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - node_qeue_nw
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: invoice
    healthcheck:
      test: ["CMD","mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./invoice/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - 27017:27017
    networks:
      - node_qeue_nw
networks:
  node_qeue_nw:
    driver: bridge
